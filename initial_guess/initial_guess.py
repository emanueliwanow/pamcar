""" ---- Changing format of doors (considering the middle point) and adding initial and end positions : door = (0,0) ---- """
doors_coordinates = [[0,0,0,0]]
for i in range(len(middle_points[0])):
    door_x = middle_points[0][i]
    door_y = middle_points[1][i]
    door_theta = middle_points_theta[0,i]
    doors_coordinates.append([door_x, door_y, 0, door_theta])
    doors_coordinates.append([door_x, door_y, 0, door_theta-pi])
doors_coordinates.append([0,0,0,0])

""" ---- Test all the possibilities of roads between doors with normal angle and opposite angle (+pi) ---- """
num_possibilities = len(doors_coordinates)
tab = np.zeros((num_possibilities, num_possibilities))

for i in range(num_possibilities):
  for j in range(num_possibilities):
    try :
      time, x, y, v = opc_problem_door_to_door(doors_coordinates[i], doors_coordinates[j])
    except RuntimeError:
      print("Non feasible solution")
      tab[i][j] = inf
    else:
      tab[i][j] = time
print(tab)


"""
# Solution with scenario 1 and last door = (0,0,0,pi)
tab = [[-9.14583276e-09,  2.05815707e+01,  2.21427782e+01,  2.17418514e+01, 2.30304480e+01,  2.24291780e+01,  2.32595221e+01,  1.69231754e+01, 1.78670357e+01,  3.27143372e+01],
       [2.78813861e+01, -9.35313633e-09,  1.07469982e+01,  1.20760557e+01, 1.34236950e+01,  2.10629649e+01,  1.83276036e+01,  1.87146723e+01, 1.61693161e+01,              inf],
       [ 2.66320249e+01,  3.27288911e+01,  3.43499544e+01,  2.74358020e+01, 2.95222162e+01,  3.29936828e+01,  3.12069131e+01,  2.59981896e+01, 2.46634202e+01,  4.57466633e+01],
       [            inf,  4.65636864e+01,  1.54086227e+01,  1.57162054e-05, 1.07603061e+01,  1.82250191e+01,  1.40233512e+01,  2.17306558e+01, 1.46519513e+01,             inf],
       [            inf,  3.45504914e+01,  1.35462291e+01,  5.34095199e+01, -9.09082527e-09,  3.40072710e+01,  3.14879316e+01,  2.95061125e+01, 2.41363829e+01,            inf],
       [            inf,             inf,  3.00038920e+01,  2.68752036e+01, 1.53217650e+01, -9.23450490e-09,  1.07603061e+01,  2.92782406e+01, 1.55332151e+01,             inf],
       [ 3.67421179e+01,             inf,  2.10533289e+01,             inf, 1.36381427e+01,  3.27209070e+01,  3.43679499e+01,  2.77445468e+01, 1.46125593e+01,             inf],
       [            inf,  2.92994532e+01,  3.06192876e+01,  2.41365865e+01, 2.54374356e+01,  1.78002236e+01,  1.93818709e+01, -3.23938257e-09, 1.07603061e+01,             inf],
       [            inf,             inf,  2.35057224e+01,             inf, 4.42771377e+01,  3.77720385e+01,  3.91968514e+01,  5.07805496e+01, 4.12753653e-03,  5.14317586e+01],
       [ 1.07540444e+01,  1.58711554e+01,  1.69237620e+01,  1.92143407e+01, 2.02686405e+01,  2.25810652e+01,  2.29262891e+01,  1.76509049e+01, 1.85264751e+01, -1.00012634e-08]]
"""

"""
# Solution with scenario 1 and last door = (0,0,0,0)
tab = [[-9.14583276e-09, 20.5815707, 22.1427782, 21.7418514, 23.030448, 22.429178, 23.2595221, 16.9231754, 17.8670357, -9.145832755696555e-09],
       [27.8813861, -9.35313633e-09, 10.7469982, 12.0760557, 13.423695, 21.0629649, 18.3276036, 18.7146723, 16.1693161, 27.881386064136098],
       [26.6320249, 32.7288911, 34.3499544, 27.435802, 29.5222162, 32.9936828, 31.2069131, 25.9981896, 24.6634202, 26.63202487100186],
       [inf, 46.5636864, 15.4086227, 1.57162054e-05, 10.7603061, 18.2250191, 14.0233512, 21.7306558, 14.6519513, inf],
       [inf, 34.5504914, 13.5462291, 53.4095199, -9.09082527e-09, 34.007271, 31.4879316, 29.5061125, 24.1363829, inf],
       [inf, inf, 30.003892, 26.8752036, 15.321765, -9.2345049e-09, 10.7603061, 29.2782406, 15.5332151, inf],
       [36.7421179, inf, 21.0533289, inf, 13.6381427, 32.720907, 34.3679499, 27.7445468, 14.6125593, 36.742117877489925],
       [inf, 29.2994532, 30.6192876, 24.1365865, 25.4374356, 17.8002236, 19.3818709, -3.23938257e-09, 10.7603061, inf],
       [inf, inf, 23.5057224, inf, 44.2771377, 37.7720385, 39.1968514, 50.7805496, 0.00412753653, inf],
       [-9.145832755696555e-09, 20.58157074234915, 22.1427781514135, 21.741851434118743, 23.030447991523253, 22.42917797698234, 23.259522116810416, 16.92317543685834, 17.86703565025437, -9.145832755696555e-09]]
"""

"""
# Solution with parallel doors and last door = (0,0,0,0)
tab = [[-9.14583276e-09,  1.89441819e+01,  2.06454349e+01,  2.00719636e+01, 2.13094978e+01,  1.80443752e+01,  1.89181022e+01,  1.26397953e+01, 1.48994172e+01, -9.14583276e-09],
       [ 2.79118164e+01,  1.83204488e-05,  1.07614417e+01,  1.41421352e+01, 1.51411824e+01,  1.69207094e+01,  1.59027681e+01,  2.06022961e+01, 1.14163495e+01,  2.79118164e+01],
       [ 3.00069227e+01,  3.27226013e+01,  3.15678815e-07,  3.23226035e+01, 3.38212502e+01,  3.07424257e+01,  3.09165599e+01,  2.64474172e+01, 2.01799268e+01,  3.00069227e+01],
       [            inf,             inf,  1.51411913e+01,  1.08738194e-05, 1.07377365e+01,  2.06022961e+01,  1.14163495e+01,  3.15594500e+01, 1.59027671e+01,             inf],
       [ 3.43189284e+01,  3.29402251e+01,  1.41421352e+01,  3.27143372e+01, 2.99657138e-06,  2.64278324e+01,  2.01799268e+01,  3.08515776e+01, 1.65669298e+01,  3.43189284e+01],
       [            inf,  3.09275425e+01,  3.14725880e+01,  2.01799268e+01, 2.05470665e+01,  2.33069417e-04,  1.07603061e+01,             inf, 3.37380576e+01,             inf],
       [ 3.51341264e+01,             inf,  1.69207094e+01,             inf, 4.12730667e+01,             inf, -5.26533141e-11,  3.29707412e+01, 1.41421350e+01,  3.51341264e+01],
       [ 2.97506769e+01,  2.01799268e+01,  2.09606319e+01,  1.65605473e+01, 1.81788419e+01,  1.41421352e+01,  1.51411824e+01, -9.59767200e-09, 1.07603061e+01,  2.97506769e+01],
       [ 2.78287197e+01,  3.96770340e+01,  4.06434462e+01,  3.67138874e+01, 3.81396226e+01,  3.22916550e+01,  3.38968269e+01,  3.27193653e+01, 3.37560979e+01,  2.78287197e+01],
       [-9.14583276e-09,  1.89441819e+01,  2.06454349e+01,  2.00719636e+01, 2.13094978e+01,  1.80443752e+01,  1.89181022e+01,  1.26397953e+01, 1.48994172e+01, -9.14583276e-09]]
"""

"""
# Solution with scenario3 and last door = (0,0,0,0)
tab = [[-9.14583276e-09,  1.68840490e+01,  1.85123582e+01,  2.25766238e+01, 1.42820637e+01,  3.40541668e+01,  1.46130486e+01,  2.77270210e+01, 2.91529945e+01, -9.14583276e-09],
       [ 2.94190119e+01, -1.02963701e-08,  1.07341867e+01,  3.09794807e+01, 1.72029604e+01,             inf,  2.06219067e+01,             inf, 2.75272425e+01,  2.94190119e+01],
       [ 2.77214657e+01,  3.27209070e+01,  3.76620498e+01,  3.19440583e+01, 1.95252617e+01,  3.79483860e+01,  1.98992404e+01,             inf, 1.99448599e+01,  2.77214657e+01],
       [ 2.30950958e+01,  1.95100208e+01,  2.09914324e+01, -1.00002664e-08, 1.07377365e+01,             inf,  2.75262538e+01,  2.76088473e+01, 2.87431674e+01,  2.30950958e+01],
       [            inf,  3.92743107e+01,  4.06530180e+01,  3.27288911e+01, 3.37353647e+01,             inf,  1.99448599e+01,             inf, 2.82394164e+01,             inf],
       [ 1.40967053e+01,  1.98992404e+01,  2.06219070e+01,  1.99441676e+01, 1.72029602e+01, -8.62102686e-09,  1.07377365e+01,  1.95160459e+01, 2.09977944e+01,  1.40967053e+01],
       [ 3.24064220e+01,  3.72816894e+01,  3.82635909e+01,  3.19912440e+01, 3.03330357e+01,  3.27193653e+01,  3.37353647e+01,  3.93270857e+01, 4.07127967e+01,  3.24064220e+01],
       [ 1.78112063e+01,  1.99448599e+01,  1.72029602e+01,  2.82414609e+01, 2.01588145e+01,  3.09333410e+01,  1.72029604e+01, -1.00079525e-08, 1.07469982e+01,  1.78112063e+01],
       [ 2.46331261e+01,  3.19510994e+01,  3.03744616e+01,  3.46977107e+01, 2.76430471e+01,  3.19906295e+01,  1.95100208e+01,  3.27193653e+01, 3.74444698e+01,  2.46331261e+01],
       [-9.14583276e-09,  1.68840490e+01,  1.85123582e+01,  2.25766238e+01, 1.42820637e+01,  3.40541668e+01,  1.46130486e+01,  2.77270210e+01, 2.91529945e+01, -9.14583276e-09]]
 """ 





""" ---- Solving the TSP algorithm with time already calculated with the OPC problem resolution ---- """
best_path, min_time = traveling_salesman_problem(doors_coordinates, tab) # door_coordinates = center of doors
print("Optimal path:", best_path)
print("Time using this path:", min_time)



""" ---- Solving OPC problem once again with best path to show the result ---- """
x_res = []
y_res = []
v_res = []
for i in range(len(best_path)-1):
    time, x, y, v = opc_problem_door_to_door(doors_coordinates[best_path[i]], doors_coordinates[best_path[i+1]])
    x_res.append(x)
    y_res.append(y)
    v_res.append(v)

plt.figure() # 2D-Map of the problem
plt.plot(points[0,:],points[1,:],'Dr',ms=6, label="Doors")
for key, value in doors.items():
    plt.text(value[0][0]+0.1,value[0][1]+0.1,key)
plt.scatter(x_res, y_res,s=20, c=v_res, cmap='viridis')
plt.colorbar(label="Velocity [m/s]")
plt.title("Optimal Trajectory")
plt.xlabel("Position x")
plt.ylabel("Position y")#
plt.legend(loc="upper left")
plt.show()
print("Distance using this path, calculated with OPC :", min_time)
